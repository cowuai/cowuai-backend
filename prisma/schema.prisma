// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ==========================
// Models
// ==========================

model Usuario {
  id             BigInt         @id @default(autoincrement())
  cpf            String         @unique @db.VarChar(14)
  nome           String         @db.VarChar(255)
  email          String         @unique @db.VarChar(255)
  senha          String         @db.VarChar(255)
  dataNascimento DateTime?      @map("data_nascimento") @db.Date
  ativo          Boolean        @default(true)
  Fazenda        Fazenda[]
  RefreshToken   RefreshToken[]

  @@map("usuario") // nome da tabela = usuario
}

model Fazenda {
  id              BigInt   @id @default(autoincrement()) @db.BigInt
  proprietario    Usuario  @relation(fields: [idProprietario], references: [id])
  idProprietario  BigInt   @unique @map("id_proprietario") @db.BigInt
  nome            String   @db.VarChar(255)
  endereco        String   @db.VarChar(255)
  cidade          String   @db.VarChar(255)
  estado          String   @db.VarChar(50)
  pais            String   @db.VarChar(50)
  porte           Porte
  afixo           String   @db.VarChar(255)
  prefixo         Boolean  @db.UnsignedTinyInt
  sufixo          Boolean  @db.UnsignedTinyInt
  dataCadastro    DateTime @default(now()) @map("data_cadastro")
  dataAtualizacao DateTime @updatedAt @map("data_atualizacao")

  animais         Animal[]

  @@map("fazenda")
}

model Animal {
  id                        BigInt      @id @default(autoincrement()) @db.BigInt
  nome                      String      @db.VarChar(255)
  tipoRaca                  TipoRaca
  composicaoRacial          String?     @db.VarChar(255)
  dataNascimento            DateTime?   @db.Date
  numeroParticularProprietario String?   @db.VarChar(255)
  registro                  String?     @db.VarChar(255)
  status                    String?     @db.VarChar(255)
  peso                      Float?

  // Relações com pais (outro Animal)
  pai                       Animal?     @relation("PaiRelation", fields: [idPai], references: [id])
  idPai                     BigInt?     @map("id_pai") @db.BigInt
  filhosComoPai             Animal[]    @relation("PaiRelation")

  mae                       Animal?     @relation("MaeRelation", fields: [idMae], references: [id])
  idMae                     BigInt?     @map("id_mae") @db.BigInt
  filhosComoMae             Animal[]    @relation("MaeRelation")

  // Relação com Fazenda
  fazenda                   Fazenda     @relation(fields: [idFazenda], references: [id])
  idFazenda                 BigInt      @db.BigInt
  
  idProprietario BigInt?

  @@map("animal")
}



model RefreshToken {
  id          String   @id @default(uuid())
  idUsuario   BigInt
  token       String   @unique
  dispositivo String   @db.VarChar(255)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuario Usuario @relation(fields: [idUsuario], references: [id])

  @@unique([idUsuario, dispositivo])
}

// ==========================
// Enums
// ==========================

enum Porte {
  PEQUENO
  MEDIO   @map("MÉDIO")
  GRANDE
}

enum TipoRaca {
  NELORE
  GIR
  GIROLANDO
  BRAHMAN
  GUZERATE    @map("GUREZÁ")
  SINDI
  ANGUS
  BRANGUS
  LIMOUSIN
  CHIANINA
  DEVON
  BELGIANBLUE @map("BELGIAN BLUE")
  HEREFORD
  CANCHIM
  TABAPUA     @map("TABAPUÃ")
  CARACU
  SENEPOL
  CHAROLAISE  @map("CHAROLÊS")
  INDUBRASIL
  WAGYU
  SIMMENTAL
  CRIOULO
  JERSEY
  HOLANDES    @map("HOLANDÊS")
  MURRAH
  MESTICO     @map("MESTIÇO")
  OUTROS
}
